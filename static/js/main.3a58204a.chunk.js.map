{"version":3,"sources":["index.js"],"names":["Square","props","winnerCell","color","value","cells","includes","id","className","onClick","Board","i","this","squares","board","currentIndex","subarray","j","push","renderSquare","map","item","idnumber","React","Component","Game","state","history","Array","fill","XIsNext","stepNumber","accending","currentSelection","lastIndex","positionIndex","step","setState","slice","calculateWinner","winner","pair","concat","length","current","winStatus","gameover","gameOver","status","moves","move","deskripshun","jumpTo","reverse","resetGame","toggleSortOrder","handleClick","line","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3a58204a.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport './index.css';\n\n\nfunction Square(props) {\n    let color = (props.value === \"X\") ? \"red\" : \"blue\";\n    let winnerCell;\n    if ((props.cells) && (props.cells.includes(props.id))) {\n        winnerCell = \" winner-cell\";\n    } else {\n        winnerCell = \"\";\n    };\n    return (\n        <button className={color + \" square\" + winnerCell}\n            onClick={\n                props.onClick\n            }>\n            {\n                props.value\n            } </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return <Square value={\n            this.props.squares[i]\n            }\n            key={i}\n            cells={this.props.cells}\n            id={i}\n            onClick={\n                () => this.props.onClick(i)\n            } />;\n    }\n\n    render() {\n        let board = [];\n        let currentIndex = 0;\n        for (let i = 0; i < 3; i += 1) {\n            let subarray = [];\n            for(let j = 0; j < 3; j += 1) {\n                subarray.push(this.renderSquare(currentIndex));\n                currentIndex += 1;\n            }\n            board.push(subarray);\n        }\n\n        return (\n            <div>\n                {\n                    board.map((item, idnumber) => {\n                        return (<div key={idnumber} className=\"board-row\">\n                            {item}\n                        </div>);\n                    })\n                }\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{squares: Array(9).fill(null)}],\n            XIsNext: true,\n            stepNumber: 0,\n            accending: true,\n            currentSelection: 0,\n            lastIndex: null,\n            positionIndex: [],\n        };\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            XIsNext: (step % 2) === 0,\n            currentSelection: step,\n        });\n    }\n\n    resetGame() {\n        this.setState({\n            history: [{squares: Array(9).fill(null)}],\n            XIsNext: true,\n            stepNumber: 0,\n            accending: true,\n            currentSelection: 0,\n            lastIndex: null,\n            positionIndex: [],\n        });\n    }\n\n    toggleSortOrder() {\n        this.setState({\n            accending: ! this.state.accending,\n        });\n    }\n\n    handleClick(i) {\n        let history = this.state.history.slice(0, this.state.stepNumber + 1);\n        let current = history[this.state.stepNumber];\n        let squares = current.squares.slice();\n\n        if (calculateWinner(squares).winner || squares[i]) {\n            return;\n        };\n        \n        squares[i] = this.state.XIsNext ? \"X\" : \"O\";\n        let row = [1, 1, 1, 2, 2, 2, 3, 3, 3];\n        let column = [1, 2, 3, 1, 2, 3, 1, 2, 3];\n        let pair = `(${row[i]},${column[i]})`;\n        let positionIndex = this.state.positionIndex.slice();\n        positionIndex.push(pair);\n        this.setState({\n            history: history.concat([{\n                squares: squares\n            }]),\n            stepNumber: history.length,\n            XIsNext: !this.state.XIsNext,\n            currentSelection: this.state.stepNumber + 1,\n            positionIndex: positionIndex,\n        });\n    }\n\n    render() {\n        let history = this.state.history.slice();\n        let current = history[this.state.stepNumber];\n        let winStatus = calculateWinner(current.squares);\n        let winner = winStatus.winner;\n        let cells = winStatus.cells;\n        let gameover = gameOver(current.squares);\n        let status = 'Next player: ' + (this.state.XIsNext ? \"X\" : \"O\");\n        if (winner) {\n            status = \"Winner is: \" + winner;\n        } else if (gameover) {\n            status = \"Game Over\";\n        };\n\n        let moves = history.map((step, move) => {\n            const deskripshun = move ? \"Goto move: #\" + move + \" \" + this.state.positionIndex[move - 1] : \"Goto Start\";\n            return (<li key={move}>\n                <button className={(this.state.currentSelection === move) ? \"bolden\" : \"\" } onClick={() => {this.jumpTo(move)}}>{deskripshun}</button>\n            </li>);\n        });\n\n        let reverse = !this.state.accending;\n\n        return (\n            <div>\n                <button id=\"restart\" onClick={() => {this.resetGame();}}>Restart</button>\n                <button id=\"toggle-sort\" onClick={() => {this.toggleSortOrder()}}>Toggle Sort</button>\n                <div className=\"game\">\n                    <div className=\"game-board\">\n                        {winner == null && <Board cells={null} squares={current.squares} onClick={(i) => this.handleClick(i)}/>}\n                        {winner != null && <Board cells={cells} squares={current.squares} onClick={(i) => this.handleClick(i)}/>}\n                    </div>\n                    <div className=\"game-info\">\n                        <div>\n                            {status}\n                        </div>\n                        <ol>\n                            {!reverse && moves}\n                            {reverse && moves.reverse()}\n                        </ol>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction calculateWinner(squares) {\n    let lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n\n    for (let line of lines) {\n        let [a, b, c] = line;\n        if ((squares[a] !== null) && (squares[a] === squares[b]) && (squares[a] === squares[c])) {\n            return {winner: squares[a], cells: [a, b, c]};\n        };\n    }\n    return {winner: null, cells: null};\n}\n\nfunction gameOver(squares) {\n    for (let item of squares) {\n        if (item === null) {\n            return false;\n        };\n    }\n    return true;\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}